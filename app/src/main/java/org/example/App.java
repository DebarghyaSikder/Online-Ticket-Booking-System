/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import org.example.entities.Train;
import org.example.entities.User;
import org.example.services.UserBookingService;
import org.example.util.UserServiceUtil;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.stream.Collectors;
import java.util.function.Predicate;
import java.util.*;
import java.util.UUID;

import static java.util.UUID.randomUUID;

public class App {

    public static void main(String[] args) {

//        List<Integer> l=Arrays.asList(1,2,3,4,5,6,7,8,9);
////        List<Integer> l1=l.stream().filter(isEven()).collect(Collectors.toList());
//        l.stream().map(e->e*2).collect(Collectors.toList());


        System.out.println("Running Train Booking System");
        Scanner scanner=new Scanner(System.in);
        int option=0; // depends on which option does the user select. So we load all the users into the service  before the user selects the option
        UserBookingService userBookingService;
        try{
            userBookingService=new UserBookingService();
        }
        catch (IOException ex){
            System.out.println("There is something wrong");
            return;  // From here only my app turns off since user was not able to load at all

        }

        while(option!=7){
            System.out.println("Choose option");
            System.out.println("1. Sign Up");
            System.out.println(("2. Login"));
            System.out.println("3. Fetch Bookings");
            System.out.println(("4. Search Trains"));
            System.out.println("5. Book a seat");
            System.out.println("6. Cancel My booking");
            System.out.println("7. Exit the App");
            option=scanner.nextInt();
            switch (option){
                case 1:
                    System.out.println("Enter the username to signup");
                    String nameToSignUp=scanner.next();
                    System.out.println("Enter the password to sign up");
                    String passwordToSignUp=scanner.next();

                    User userToSignUp=new User(nameToSignUp, passwordToSignUp,
                            UserServiceUtil.hashPassword(passwordToSignUp), // whatever pw the user has entered I am directly hashing it before signing up the user and not keeping it in my db
                            new ArrayList<>(),UUID.randomUUID().toString()); // UUID generates random ID
                    userBookingService.signUp(userToSignUp);
                    break;
                    // Now user has been signed

                case 2:
                    System.out.println("Enter the username to login");
                    String nameToLogin=scanner.next();
                    System.out.println("Enter the password to signup");
                    String passwordToLogin=scanner.next();
                    User userToLogin=new User(nameToLogin, passwordToLogin,
                            UserServiceUtil.hashPassword(passwordToLogin),
                            new ArrayList<>(), UUID.randomUUID().toString());

                    try{
                        userBookingService=new UserBookingService(userToLogin);
                    }
                    catch (IOException ex){
                        return;
                    }
                    break;

                case 3:
                    System.out.println("Fetching our bookings");
                    userBookingService.fetchBookings();
                    break;

                case 4:
                    System.out.println("Type your source station");
                    String source=scanner.next();
                    System.out.println("Type your destination station");
                    String dest=scanner.next();
                    List<Train> trains=userBookingService.getTrains(source,dest);
                    int index=1;
                    for(Train t: trains){
                        System.out.println(index+ " Train id: "+t.getTrainId());
                        for(Map.Entry<String,String> entry: t.getStationTimes().entrySet()){
                            System.out.println("station "+entry.getKey()+" time: "+entry.getValue());
                        }
                    }

            }
        }



    }

//    Integer apply(Integer i)   the above operation is same as this
//    {
//        return 2*i;
//    }

//    public static Predicate<Integer> isEven(){
//        return i->i%2==0;
//    }


}
